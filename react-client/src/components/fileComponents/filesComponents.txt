EmptyFileState
import { File } from "lucide-react";
import { motion } from "framer-motion";
const EmptyFileState = () => {
  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      className="text-center py-16">
      <div className="p-6 rounded-full bg-emerald-100 w-fit mx-auto mb-6">
        <File className="h-12 w-12 text-emerald-400" />
      </div>
      <h3 className="text-xl font-semibold text-gray-800 mb-2">No files yet</h3>
      <p className="text-gray-500 max-w-md mx-auto">
        Upload your first file to get started with secure file management
      </p>
    </motion.div>
  );
};

export default EmptyFileState;
FileActions

import { Button } from "@/styles/ui/button";
import { Download, Pencil, Share2, Trash2 } from "lucide-react";
import { motion } from "framer-motion";
import { FileDto } from "@/types/FileDto";
import { useEffect } from "react";
import { useToast } from "@/styles/hooks/use-toast";
interface FileActionsProps {
  file: FileDto;
  onDownload: (fileId: number) => void;
  onRename: (file: FileDto) => void;
  onShare: (file: FileDto) => void;
  onDelete: (fileId: number) => void;
  isDeleting: boolean;
  deleteError: string | null;
}

const FileActions = ({ file, onDownload, onRename, onShare, onDelete, isDeleting, deleteError }: FileActionsProps) => {
  const { toast } = useToast();
  useEffect(() => {
    if (deleteError) {
      toast({
        title: "Delete Failed",
        description: `Failed to delete "${file.name}"`,
        variant: "destructive",
      });
    }
  }, [deleteError, file.name, toast]);
  return (
    <div className="flex gap-1 justify-center">
      <motion.div whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.95 }}>
        <Button
          variant="ghost"
          size="icon"
          onClick={() => onDelete(file.id)}
          disabled={isDeleting}
          className="h-9 w-9 rounded-xl hover:bg-red-100 hover:text-red-600 transition-all duration-200 relative"
          title="Delete"
        >
          {isDeleting ? (
            <div className="w-4 h-4 border-2 border-t-transparent border-red-500 rounded-full animate-spin" />
          ) : (
            <Trash2 className="w-4 h-4" />
          )}
        </Button>
      </motion.div>

      <motion.div whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.95 }}>
        <Button
          variant="ghost"
          size="icon"
          onClick={() => onRename(file)}
          className="h-9 w-9 rounded-xl hover:bg-orange-100 hover:text-orange-600 transition-all duration-200"
          title="Rename"
        >
          <Pencil className="w-4 h-4" />
        </Button>
      </motion.div>

      <motion.div whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.95 }}>
        <Button
          variant="ghost"
          size="icon"
          onClick={() => onShare(file)}
          className="h-9 w-9 rounded-xl hover:bg-rose-100 hover:text-rose-600 transition-all duration-200"
          title="Share"
        >
          <Share2 className="w-4 h-4" />
        </Button>
      </motion.div>

      <motion.div whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.95 }}>
        <Button
          variant="ghost"
          size="icon"
          onClick={() => onDownload(file.id)}
          className="h-9 w-9 rounded-xl hover:bg-red-100 hover:text-red-600 transition-all duration-200"
          title="Download"
        >
          <Download className="w-4 h-4" />
        </Button>
      </motion.div>
    </div>

  );
};

export default FileActions;
FileGridWiew
import { useEffect, useState } from "react";
import { FileDto } from "@/types/FileDto";
import { motion } from "framer-motion";
import FileIcon from "./FileIcon";
import FileTypeLabel from "./FileTypeLevel";
import { Button } from "@/styles/ui/button";
import { Download, Pencil, Share2, Trash2, MoreVertical } from "lucide-react";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/styles/ui/dropdown-menu";
import { SharePostModel } from "@/types/SharePostModel";
import RenameDialog from "./RenameDialog";
import ShareFileDialog from "../shareComponents/ShareFileDialog";
import { toast } from "@/styles/hooks/use-toast";

interface FileGridViewProps {
    files: FileDto[];
    onDownload: (fileId: number) => void;
    onRename: (file: FileDto) => void;
    onShare: (file: SharePostModel) => void;
    onDelete: (fileId: number) => void;
    deleteErrorById: { [fileId: number]: string | null };
    isDeletingById: { [fileId: number]: boolean };
    isUpdating?: boolean;
    updateError?: string | null;
}

const FileGridView = ({
    files,
    onDownload,
    onRename,
    onShare,
    onDelete,
    deleteErrorById,
    isDeletingById,
    isUpdating,
    updateError,
}: FileGridViewProps) => {
    const [isRenameOpen, setIsRenameOpen] = useState(false);
    const [isShareOpen, setIsShareOpen] = useState(false);
    const [selectedFile, setSelectedFile] = useState<FileDto | null>(null);
    const [selectedFileShare, setSelectedFileShare] = useState<FileDto | null>(null);

    const handleOpenShare = (file: FileDto) => {
        setSelectedFileShare(file);
        setIsShareOpen(true);
    };

    const handleCloseShare = () => {
        setIsShareOpen(false);
        setSelectedFileShare(null);
    };

    const handleDialogShare = (updatedFile: SharePostModel) => {
        onShare(updatedFile);
        handleCloseShare();
    };

    const handleOpenRename = (file: FileDto) => {
        setSelectedFile(file);
        setIsRenameOpen(true);
    };

    const handleCloseRename = () => {
        setSelectedFile(null);
        setIsRenameOpen(false);
    };

    const handleDialogRename = (updatedFile: FileDto) => {
        onRename(updatedFile);
        handleCloseRename();
    };

    useEffect(() => {
        Object.entries(deleteErrorById).forEach(([fileId, errorMessage]) => {
            if (errorMessage) {
                const file = files.find(f => f.id === Number(fileId));
                if (file) {
                    toast({
                        title: `Failed to delete "${file.name}"`,
                        description: errorMessage,
                        variant: "destructive",
                    });
                }
            }
        });
    }, [deleteErrorById]);
    return (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {files.map((file, index) => (
                <motion.div
                    key={file.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.05 }}
                    className="bg-white rounded-xl shadow-sm border border-gray-100 p-6 hover:shadow-md hover:border-emerald-200 transition-all duration-200 group"
                >
                    <div className="flex flex-col h-full">
                        <div className="flex items-start justify-between mb-4">
                            <div className="p-3 rounded-xl bg-gray-50 group-hover:bg-emerald-50 transition-colors">
                                <FileIcon fileType={file.contentType} className="w-8 h-8" />
                            </div>
                            <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                    <Button
                                        variant="ghost"
                                        size="icon"
                                        className="h-8 w-8 opacity-0 group-hover:opacity-100 transition-opacity"
                                    >
                                        <MoreVertical className="w-4 h-4" />
                                    </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent className="bg-white border border-gray-200 shadow-lg rounded-lg z-50">
                                    <DropdownMenuItem onClick={() => onDownload(file.id)} className="hover:bg-emerald-50">
                                        <Download className="w-4 h-4 mr-2" />
                                        Download
                                    </DropdownMenuItem>
                                    <DropdownMenuItem onClick={() => handleOpenRename(file)} className="hover:bg-orange-50">
                                        <Pencil className="w-4 h-4 mr-2" />
                                        Rename
                                    </DropdownMenuItem>
                                    <DropdownMenuItem onClick={() => handleOpenShare(file)} className="hover:bg-rose-50">
                                        <Share2 className="w-4 h-4 mr-2" />
                                        Share
                                    </DropdownMenuItem>
                                    <DropdownMenuItem
                                        onClick={() => !isDeletingById[file.id] && onDelete(file.id)}
                                        disabled={isDeletingById[file.id]}
                                        className="hover:bg-red-50 text-red-600 flex items-center"
                                    >
                                        {isDeletingById[file.id] ? (
                                            <div className="w-4 h-4 mr-2 animate-spin border-2 border-t-transparent border-red-600 rounded-full"></div>
                                        ) : (
                                            <Trash2 className="w-4 h-4 mr-2" />
                                        )}
                                        {isDeletingById[file.id] ? "Deleting..." : "Delete"}
                                    </DropdownMenuItem>
                                </DropdownMenuContent>
                            </DropdownMenu>
                        </div>
                        <div className="flex-1">
                            <h3 className="font-semibold text-gray-900 mb-2 line-clamp-2 text-base">{file.name}</h3>
                            <div className="space-y-2">
                                <FileTypeLabel mimeType={file.contentType} />
                                <p className="text-sm text-gray-500">
                                    {new Date(file.updatedAt).toLocaleDateString("en-US", {
                                        month: "short",
                                        day: "numeric",
                                        year: "numeric",
                                    })}
                                </p>
                            </div>
                        </div>
                    </div>
                </motion.div>
            ))}
            {selectedFile && (
                <RenameDialog
                    isOpen={isRenameOpen}
                    onClose={handleCloseRename}
                    file={selectedFile}
                    onRename={handleDialogRename}
                    isUpdating={isUpdating}
                    updateError={updateError}
                />
            )}

            {selectedFileShare && (
                <ShareFileDialog isOpen={isShareOpen} onClose={handleCloseShare} file={selectedFileShare} onShare={handleDialogShare} />
            )}
        </div>
    );
};

export default FileGridView;

FileIcon
import {
  Image,
  FileText,
  Music,
  Video,
  Archive,
  Code,
  File,
  FileSpreadsheet,
  FileType2,
  Presentation,
} from "lucide-react";

type FileIconProps = {
  fileType: string;
  className?: string;
};

const iconMap: { [key: string]: { icon: React.ElementType; color: string } } = {
  "image": { icon: Image, color: "text-rose-500" },
  "application/pdf": { icon: FileText, color: "text-red-500" },
  "application/msword": { icon: FileType2, color: "text-blue-500" },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": { icon: FileType2, color: "text-blue-500" },
  "application/vnd.ms-excel": { icon: FileSpreadsheet, color: "text-green-500" },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": { icon: FileSpreadsheet, color: "text-green-500" },
  "application/vnd.ms-powerpoint": { icon: Presentation, color: "text-orange-500" },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation": { icon: Presentation, color: "text-orange-500" },
  "audio": { icon: Music, color: "text-orange-500" },
  "video": { icon: Video, color: "text-emerald-500" },
  "application/zip": { icon: Archive, color: "text-amber-500" },
  "application/x-7z-compressed": { icon: Archive, color: "text-amber-500" },
  "application/x-rar-compressed": { icon: Archive, color: "text-amber-500" },
  "application/x-tar": { icon: Archive, color: "text-amber-500" },
  "text/x-python": { icon: Code, color: "text-emerald-600" },
  "application/x-python": { icon: Code, color: "text-emerald-600" },
  "application/javascript": { icon: Code, color: "text-emerald-600" },
  "text/javascript": { icon: Code, color: "text-emerald-600" },
  "text/x-c++src": { icon: Code, color: "text-emerald-600" },
};

const FileIcon = ({ fileType, className = "w-5 h-5" }: FileIconProps) => {
  const lowerType = fileType.toLowerCase();
  const [type] = lowerType.split("/");
  const match = iconMap[lowerType];
  const fallback = iconMap[type];
  const { icon: Icon, color } = match || fallback || { icon: File, color: "text-gray-500" };
  return <Icon className={`${className} ${color}`} />;
};

export default FileIcon;

FileRow
import { TableCell } from "@/styles/ui/table";
import { FileDto } from "@/types/FileDto";
import { motion } from "framer-motion";
import FileIcon from "./FileIcon";
import FileActions from "./FileActions";
import FileTypeLabel from "./FileTypeLevel";
interface FileRowProps {
  file: FileDto;
  index: number;
  onDownload: (fileId: number) => void;
  onRename: (file: FileDto) => void;
  onShare: (file: FileDto) => void;
  onDelete: (fileId: number) => void;
  isDeleting: boolean;
  deleteError: string | null;
}

const FileRow = ({ file, index, onDownload, onRename, onShare, onDelete, isDeleting, deleteError }: FileRowProps) => {
  return (
    <motion.tr
      key={file.id}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, x: -100 }}
      transition={{ duration: 0.3, delay: index * 0.05 }}
      className="group hover:bg-emerald-50/50 transition-all duration-200 border-b border-gray-100 last:border-b-0"
    >
      <TableCell className="py-4">
        <div className="flex items-center gap-4">
          <div className="p-2 rounded-xl bg-gray-50 group-hover:bg-white transition-colors duration-200">
            <FileIcon fileType={file.contentType} />
          </div>
          <div>
            <span className="font-medium text-gray-900 text-base">{file.name}</span>
          </div>
        </div>
      </TableCell>
      <TableCell>
        <FileTypeLabel mimeType={file.contentType} />
      </TableCell>
      <TableCell className="text-gray-600 font-medium">
        {new Date(file.updatedAt).toLocaleDateString("en-US", {
          month: "short",
          day: "numeric",
          year: "numeric",
        })}
      </TableCell>
      <TableCell>
        <FileActions
          file={file}
          onDownload={() => onDownload(file.id)}
          onRename={() => onRename(file)}
          onShare={() => onShare(file)}
          onDelete={() => onDelete(file.id)}
          isDeleting={isDeleting}
          deleteError={deleteError}
        />
      </TableCell>
    </motion.tr>
  );
};

export default FileRow;

Files
import { deleteFile, fetchFilesByUserId, updateFile } from "@/features/files/filesSlice";
import { useAppDispatch, useAppSelector } from "@/hooks";
import { Alert, AlertDescription } from "@/styles/ui/alert";
import { Button } from "@/styles/ui/button";
import { Loader2, Upload } from "lucide-react";
import { useEffect, useState } from "react";
import FileTable from "./FileTable";
import { FileDto } from "@/types/FileDto";
import { SharePostModel } from "@/types/SharePostModel";
import { useFileFilters } from "@/features/useFileFilters";
import FileGridView from "./FileGridWiew";
import SearchAndFilter from "../shareComponents/SearchAndFilter";
import ViewToggle from "../mainComponents/ViewToggle";
import FileStats from "./FileStas";
import { fetchSharesToOthers, shareFile } from "../../features/shares/shareSlice";
import { openUploadDialog } from "@/features/files/uiSlice";
const Files = () => {
  const dispatch = useAppDispatch();
  const user = useAppSelector(state => state.auth.user);
  
  const { items: files, isFetching, fetchError, isDeletingById, deleteErrorById, isUpdating, updateError, hasFetched } = useAppSelector(state => state.files);
  const [view, setView] = useState<'table' | 'grid' | 'compact'>('table');
  const {
    searchTerm,
    setSearchTerm,
    sortBy,
    setSortBy,
    sortOrder,
    toggleSortOrder,
    filterType,
    setFilterType,
    filteredAndSortedFiles,
    resetFilters,
  } = useFileFilters(files);

  useEffect(() => {
    if (user && !hasFetched) {
      dispatch(fetchFilesByUserId());
    }
  }, [dispatch, user, hasFetched]);
  const handleDelete = async (fileId: number) => {
    try {
      await dispatch(deleteFile(fileId)).unwrap();
      await dispatch(fetchSharesToOthers()).unwrap();
    } catch {
    }
  };

  const handleRename = async (updatedFile: FileDto) => {
    try {
      await dispatch(updateFile(updatedFile)).unwrap();
    } catch {
    }
  };
  const handleDownload = (fileId: number) => {
    console.log(`Download file with ID: ${fileId}`);
  };
  const handleShare = async (updatedFile: SharePostModel) => {
    await dispatch(shareFile(updatedFile)).unwrap();
    await dispatch(fetchSharesToOthers()).unwrap();
  };

  const activeFiles = files.filter(file => !file.isDelete);
  return (
    <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-white to-orange-50">
      <div className="container mx-auto px-4 py-8">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
          <div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-emerald-600 to-emerald-700 bg-clip-text text-transparent">
              My Files
            </h1>
            <p className="text-gray-600 mt-2 text-lg">
              Manage your encrypted files securely
            </p>
          </div>
          <div className="flex items-center gap-3">
            <ViewToggle view={view} onViewChange={setView} />
            {user && (
              <Button
                onClick={() => dispatch(openUploadDialog())}
                className="h-12 px-6 rounded-xl bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 shadow-lg hover:shadow-xl transition-all duration-200"
              >
                <Upload className="w-5 h-5 mr-2" />
                Upload File
              </Button>
            )}
          </div>
        </div>

        {fetchError && (
          <Alert variant="destructive" className="mb-6 border-red-200 bg-red-50">
            <AlertDescription className="text-red-700">
              {fetchError}
            </AlertDescription>
          </Alert>
        )}

        {isFetching ? (
          <div className="flex justify-center items-center py-20">
            <div className="text-center">
              <div className="relative">
                <Loader2 className="w-12 h-12 animate-spin text-emerald-600 mx-auto" />
                <div className="absolute inset-0 w-12 h-12 rounded-full border-2 border-emerald-200 mx-auto"></div>
              </div>
              <span className="mt-4 block text-lg text-gray-600 font-medium">Loading files...</span>
              <span className="mt-1 block text-sm text-gray-500">Decrypting your secure files</span>
            </div>
          </div>
        ) : (
          <>
            <FileStats files={activeFiles} />
            <SearchAndFilter
              searchTerm={searchTerm}
              onSearchChange={setSearchTerm}
              sortBy={sortBy}
              onSortChange={setSortBy}
              sortOrder={sortOrder}
              onSortOrderToggle={toggleSortOrder}
              filterType={filterType}
              onFilterTypeChange={setFilterType}
              onReset={resetFilters}
              totalFiles={activeFiles.length}
              filteredFiles={filteredAndSortedFiles.length}
            />
            {view === 'grid' ? (
              <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border-0 overflow-hidden">
                <div className="bg-gradient-to-r from-emerald-500 to-orange-500 h-1"></div>
                <div className="p-6">
                  {filteredAndSortedFiles.length === 0 ? (
                    <div className="text-center py-16">
                      <p className="text-gray-500 text-lg">No files match your search criteria</p>
                    </div>
                  ) : (
                    <FileGridView
                      files={filteredAndSortedFiles}
                      onDelete={handleDelete}
                      onRename={handleRename}
                      onDownload={handleDownload}
                      onShare={handleShare}
                      isDeletingById={isDeletingById}
                      deleteErrorById={deleteErrorById}
                      isUpdating={isUpdating}
                      updateError={updateError}
                    />
                  )}
                </div>
              </div>
            ) : (
              <FileTable
                files={filteredAndSortedFiles}
                onDelete={handleDelete}
                onRename={handleRename}
                onDownload={handleDownload}
                onShare={handleShare}
                isDeletingById={isDeletingById}
                deleteErrorById={deleteErrorById}
                isUpdating={isUpdating}
                updateError={updateError}
              />
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default Files;
FileStas
import { FileText, Image, Music, Video, Archive, Code } from "lucide-react";
import { motion } from "framer-motion";
import { FileDto } from "@/types/FileDto";

interface FileStatsProps {
  files: FileDto[];
}

const FileStats = ({ files }: FileStatsProps) => {
  const activeFiles = files.filter(file => !file.isDelete);
  
  const getFileTypeCategory = (contentType: string): string => {
    const type = contentType.toLowerCase();
    if (type.startsWith('image/')) return 'image';
    if (type.startsWith('audio/')) return 'audio';
    if (type.startsWith('video/')) return 'video';
    if (type.includes('zip') || type.includes('archive') || type.includes('compressed')) return 'archive';
    if (type.includes('javascript') || type.includes('python') || type.includes('code')) return 'code';
    return 'document';
  };

  const stats = activeFiles.reduce((acc, file) => {
    const category = getFileTypeCategory(file.contentType);
    acc[category] = (acc[category] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const statItems = [
    { key: 'document', label: 'Documents', icon: FileText, color: 'text-blue-500', bg: 'bg-blue-50' },
    { key: 'image', label: 'Images', icon: Image, color: 'text-rose-500', bg: 'bg-rose-50' },
    { key: 'audio', label: 'Audio', icon: Music, color: 'text-orange-500', bg: 'bg-orange-50' },
    { key: 'video', label: 'Videos', icon: Video, color: 'text-emerald-500', bg: 'bg-emerald-50' },
    { key: 'archive', label: 'Archives', icon: Archive, color: 'text-amber-500', bg: 'bg-amber-50' },
    { key: 'code', label: 'Code', icon: Code, color: 'text-purple-500', bg: 'bg-purple-50' },
  ];

  return (
    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-6">
      {statItems.map((item, index) => {
        const count = stats[item.key] || 0;
        const Icon = item.icon;
        
        return (
          <motion.div
            key={item.key}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
            className={`${item.bg} rounded-xl p-4 border border-gray-100 hover:shadow-md transition-all duration-200`}
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-2xl font-bold text-gray-800">{count}</p>
                <p className="text-sm text-gray-600 font-medium">{item.label}</p>
              </div>
              <Icon className={`w-6 h-6 ${item.color}`} />
            </div>
          </motion.div>
        );
      })}
    </div>
  );
};

export default FileStats;

FileTable
import { TableHeader, TableRow, TableHead, TableBody, Table } from "@/styles/ui/table";
import { FileDto } from "@/types/FileDto";
import { AnimatePresence } from "framer-motion";
import { useState } from "react";
import RenameDialog from "./RenameDialog";
import { SharePostModel } from "@/types/SharePostModel";
import ShareFileDialog from "../shareComponents/ShareFileDialog";
import FileRow from "./FileRow";
import EmptyFileState from "./EmptyFileState";

const FileTable = ({
  files,
  onDelete,
  onRename,
  onDownload,
  onShare,
  deleteErrorById,
  isDeletingById,
  isUpdating,
  updateError,
}: {
  files: FileDto[],
  onDelete: (file: number) => void,
  onRename: (file: FileDto) => void,
  onDownload: (file: number) => void,
  onShare: (file: SharePostModel) => void,
  deleteErrorById?: { [fileId: number]: string | null },
  isDeletingById?: { [fileId: number]: boolean },
  isUpdating: boolean,
  updateError: string | null,
}) => {
  const [isRenameOpen, setIsRenameOpen] = useState(false);
  const [isShareOpen, setIsShareOpen] = useState(false);
  const [selectedFile, setSelectedFile] = useState<FileDto | null>(null);
  const [selectedFileShare, setSelectedFileShare] = useState<FileDto | null>(null);

  const handleOpenShare = (file: FileDto) => {
    setSelectedFileShare(file);
    setIsShareOpen(true);
  };

  const handleCloseShare = () => {
    setIsShareOpen(false);
    setSelectedFileShare(null);
  };

  const handleDialogShare = (updatedFile: SharePostModel) => {
    onShare(updatedFile);
    handleCloseShare();
  };

  const handleOpenRename = (file: FileDto) => {
    setSelectedFile(file);
    setIsRenameOpen(true);
  };

  const handleCloseRename = () => {
    setSelectedFile(null);
    setIsRenameOpen(false);
  };

  const handleDialogRename = (updatedFile: FileDto) => {
    onRename(updatedFile);
    handleCloseRename();
  };

  const activeFiles = files.filter(file => !file.isDelete);

  return (
    <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border-0 overflow-hidden">
      <div className="bg-gradient-to-r from-emerald-500 to-orange-500 h-1"></div>

      {activeFiles.length === 0 ? (
        <EmptyFileState />
      ) : (
        <div className="overflow-hidden">
          <Table>
            <TableHeader>
              <TableRow className="bg-gray-50/80 border-b border-gray-200">
                <TableHead className="font-semibold text-gray-700 py-4">File Name</TableHead>
                <TableHead className="font-semibold text-gray-700">Type</TableHead>
                <TableHead className="font-semibold text-gray-700">Date Modified</TableHead>
                <TableHead className="font-semibold text-gray-700 text-center">Actions</TableHead>
              </TableRow>
            </TableHeader>

            <TableBody>
              <AnimatePresence mode="popLayout">
                {activeFiles.map((file, index) => (
                  <FileRow
                    key={file.id}
                    file={file}
                    index={index}
                    onDownload={onDownload}
                    onRename={handleOpenRename}
                    onShare={handleOpenShare}
                    onDelete={onDelete}
                    isDeleting={isDeletingById?.[file.id] ?? false}
                    deleteError={deleteErrorById?.[file.id] ?? null}
                  />
                ))}
              </AnimatePresence>
            </TableBody>
          </Table>
        </div>
      )}

      {selectedFile && (
        <RenameDialog
          isOpen={isRenameOpen}
          onClose={handleCloseRename}
          file={selectedFile}
          onRename={handleDialogRename}
          isUpdating={isUpdating}
          updateError={updateError}
        />
      )}

      {selectedFileShare && (
        <ShareFileDialog
          isOpen={isShareOpen}
          onClose={handleCloseShare}
          file={selectedFileShare}
          onShare={handleDialogShare}
        />
      )}
    </div>
  );
};

export default FileTable;

FileTypeLevel
interface FileTypeLabelProps {
  mimeType: string;
}
const FileTypeLabel = ({ mimeType }: FileTypeLabelProps) => {
  const getFileTypeLabel = (type: string) => {
    if (type.startsWith('image/')) return 'Image';
    if (type.startsWith('video/')) return 'Video';
    if (type.startsWith('audio/')) return 'Audio';
    if (type.includes('pdf')) return 'PDF';
    return 'Document';
  };
  return (
    <span className="px-2 py-1 text-xs rounded-full bg-gray-100 text-gray-600">
      {getFileTypeLabel(mimeType)}
    </span>
  );
};

export default FileTypeLabel;
RenameDialog
import { useEffect, useState } from "react";
import { Button } from "@/styles/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/styles/ui/dialog";
import { Input } from "@/styles/ui/input";
import { Label } from "@/styles/ui/label";
import { Pencil, FileText } from "lucide-react";
import { motion } from "framer-motion";
import { toast } from "@/styles/hooks/use-toast"; 

interface RenameDialogProps {
  isOpen: boolean;
  onClose: () => void;
  file: { name: string; [key: string]: any } | null;
  onRename: (updatedFile: any) => void;
  updateError?: string | null;
  isUpdating?: boolean;
}

const RenameDialog = ({
  isOpen,
  onClose,
  file,
  onRename,
  updateError,
  isUpdating,
}: RenameDialogProps) => {
  const [newName, setNewName] = useState(file?.name || "");

  useEffect(() => {
    setNewName(file?.name || "");
  }, [file]);

 useEffect(() => {
  if (updateError) {
    toast({
      title: "Rename failed",
      description: updateError,
      variant: "destructive",
    });
  }
}, [updateError]);

const handleSubmit = (e: React.FormEvent) => {
  e.preventDefault();
  if (!newName.trim() || newName === file?.name) return;

  const updatedFile = {
    ...file,
    name: newName.trim(),
    updatedAt: new Date().toISOString(),
  };

  onRename(updatedFile);

  toast({
    title: "File renamed",
    description: `New name: ${newName.trim()}`,
  });
};
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[500px] border-0 shadow-2xl bg-white/95 backdrop-blur-sm">
        <div className="bg-gradient-to-r from-orange-500 to-pink-500 h-1 -mt-6 mx-6 rounded-t-lg"></div>

        <DialogHeader className="text-center pb-6">
          <DialogTitle className="flex items-center justify-center gap-3 text-xl">
            <div className="p-3 rounded-xl bg-gradient-to-br from-orange-500 to-orange-600 shadow-lg">
              <Pencil className="w-5 h-5 text-white" />
            </div>
            <span className="bg-gradient-to-r from-orange-600 to-orange-700 bg-clip-text text-transparent">
              Rename File
            </span>
          </DialogTitle>
          <DialogDescription className="text-gray-600 mt-2">
            Give{" "}
            <span className="font-semibold text-orange-600">
              "{file?.name}"
            </span>{" "}
            a new name
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-3">
            <Label
              htmlFor="name"
              className="text-sm font-semibold text-gray-700 flex items-center gap-2"
            >
              <FileText className="w-4 h-4" />
              New File Name
            </Label>
            <div className="relative">
              <Input
                id="name"
                value={newName}
                onChange={(e) => setNewName(e.target.value)}
                placeholder="Enter new file name"
                className="h-12 border-gray-200 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all"
              />
            </div>
            {newName && newName !== file?.name && (
              <motion.div
                initial={{ opacity: 0, scale: 0.95 }}
                animate={{ opacity: 1, scale: 1 }}
                className="p-3 bg-orange-50 rounded-lg border border-orange-200"
              >
                <p className="text-sm text-orange-700 font-medium">
                  Preview: {newName}
                </p>
              </motion.div>
            )}
          </div>

          <DialogFooter className="gap-3">
            <Button
              type="button"
              variant="outline"
              onClick={onClose}
              className="flex-1 h-12 rounded-xl border-gray-200 hover:bg-gray-50 transition-all"
              disabled={isUpdating}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              className="flex-1 h-12 rounded-xl bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 shadow-lg hover:shadow-xl transition-all duration-200"
              disabled={
                !newName.trim() || newName === file?.name || isUpdating
              }
            >
              {isUpdating ? (
                <span className="flex items-center justify-center gap-2">
                  <span className="animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full" />
                  Renaming...
                </span>
              ) : (
                <>
                  <Pencil className="w-4 h-4 mr-2" />
                  Rename File
                </>
              )}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default RenameDialog;

UploadFile
import { useState, ChangeEvent, FormEvent, useEffect } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/styles/ui/dialog";
import { Input } from "@/styles/ui/input";
import { Button } from "@/styles/ui/button";
import { Label } from "@/styles/ui/label";
import { UploadCloud, Check, FileText, Sparkles } from "lucide-react";
import { motion } from "framer-motion";
import { toast } from "@/styles/hooks/use-toast";

type UploadFileDialogProps = {
  isOpen: boolean;
  onClose: () => void;
  onUpload: (file: File, customFileName: string) => Promise<void>;
  uploading: boolean;
  uploadError: string | null;
  progress: number;
};

const UploadFileDialog = ({
  isOpen,
  onClose,
  onUpload,
  uploading,
  uploadError,
  progress,
}: UploadFileDialogProps) => {
  const [file, setFile] = useState<File | null>(null);
  const [customFileName, setCustomFileName] = useState("");
  const [dragActive, setDragActive] = useState(false);
  const [localError, setLocalError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  const MAX_FILE_SIZE = 100 * 1024 * 1024;

  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.files?.[0]) {
      setFile(e.target.files[0]);
      setLocalError(null);
    }
  };

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    if (e.dataTransfer.files?.[0]) {
      setFile(e.dataTransfer.files[0]);
      setLocalError(null);
    }
  };

  const handleUpload = async (e: FormEvent) => {
    e.preventDefault();
    if (!file) return;

    if (file.size > MAX_FILE_SIZE) {
      const message = "File size exceeds 100MB limit.";
      setLocalError(message);
      toast({
        title: "File too large",
        description: message,
        variant: "destructive",
      });
      return;
    }

    setLocalError(null);
    try {
      await onUpload(file, customFileName);
      toast({
        title: "Upload successful",
        description: `${file.name} was uploaded and encrypted.`,
      });
      setSuccess(true);
      setTimeout(() => {
        handleClose();
      }, 1000);
    } catch {
      const errorMessage = "Upload failed. Please try again.";
      setLocalError(errorMessage);
      toast({
        title: "Upload failed",
        description: errorMessage,
        variant: "destructive",
      });
    }
  };

  const handleClose = () => {
    setFile(null);
    setCustomFileName("");
    setLocalError(null);
    setSuccess(false);
    onClose();
  };

  useEffect(() => {
    if (!isOpen) {
      setFile(null);
      setCustomFileName("");
      setLocalError(null);
      setSuccess(false);
    }
  }, [isOpen]);

  return (
    <Dialog open={isOpen} onOpenChange={(open) => (open ? null : handleClose())}>
      <DialogContent className="sm:max-w-[500px] border-0 shadow-2xl bg-white/95 backdrop-blur-sm">
        <div className="bg-gradient-to-r from-emerald-500 to-pink-500 h-1 -mt-6 mx-6 rounded-t-lg"></div>

        <DialogHeader className="text-center pb-6">
          <DialogTitle className="flex items-center justify-center gap-3 text-2xl">
            <div className="p-3 rounded-xl bg-gradient-to-br from-emerald-500 to-emerald-600 shadow-lg">
              <UploadCloud className="w-6 h-6 text-white" />
            </div>
            <span className="bg-gradient-to-r from-emerald-600 to-emerald-700 bg-clip-text text-transparent">
              Upload File
            </span>
          </DialogTitle>
          <DialogDescription className="text-gray-600 mt-2">
            Select a file to upload and encrypt securely in the cloud
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleUpload} className="space-y-6">
          <div className="space-y-3">
            <Label
              htmlFor="fileName"
              className="text-sm font-semibold text-gray-700 flex items-center gap-2"
            >
              <FileText className="w-4 h-4" />
              Custom File Name (Optional)
            </Label>
            <Input
              id="fileName"
              type="text"
              placeholder="Enter custom file name"
              value={customFileName}
              onChange={(e) => setCustomFileName(e.target.value)}
              disabled={uploading || success}
              className="h-12 border-gray-200 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-all"
            />
          </div>

          <div className="space-y-3">
            <Label className="text-sm font-semibold text-gray-700">
              Choose File
            </Label>

            <div
              className={`relative border-2 border-dashed rounded-xl p-8 text-center transition-all duration-200 ${dragActive
                  ? "border-emerald-500 bg-emerald-50"
                  : file
                    ? "border-emerald-300 bg-emerald-50"
                    : "border-gray-300 hover:border-emerald-400 hover:bg-emerald-50/50"
                }`}
              onDragEnter={handleDrag}
              onDragLeave={handleDrag}
              onDragOver={handleDrag}
              onDrop={handleDrop}
            >
              <input
                type="file"
                onChange={handleFileChange}
                className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                disabled={uploading || success}
              />

              {file ? (
                <motion.div
                  initial={{ scale: 0.8, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  className="space-y-3"
                >
                  <div className="p-3 rounded-full bg-emerald-100 w-fit mx-auto">
                    <FileText className="w-6 h-6 text-emerald-600" />
                  </div>
                  <div>
                    <p className="font-medium text-gray-900">{file.name}</p>
                    <p className="text-sm text-gray-500 mt-1">
                      {(file.size / 1024 / 1024).toFixed(2)} MB
                    </p>
                    {customFileName && (
                      <p className="text-sm text-emerald-600 mt-1 font-medium">
                        → Will be saved as: {customFileName}
                      </p>
                    )}
                  </div>
                </motion.div>
              ) : (
                <div className="space-y-3">
                  <div className="p-3 rounded-full bg-gray-100 w-fit mx-auto">
                    <UploadCloud className="w-6 h-6 text-gray-400" />
                  </div>
                  <div>
                    <p className="font-medium text-gray-900">
                      Drop files here or click to browse
                    </p>
                    <p className="text-sm text-gray-500 mt-1">
                      Supports all file types up to 100MB
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>

          {(localError || uploadError) && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              className="p-3 bg-red-50 rounded-lg border border-red-200"
            >
              <p className="text-sm text-red-700 font-medium">
                {localError || uploadError}
              </p>
            </motion.div>
          )}

          <DialogFooter className="gap-3">
            <Button
              type="button"
              variant="outline"
              onClick={handleClose}
              className="flex-1 h-12 rounded-xl border-gray-200 hover:bg-gray-50 transition-all"
            >
              Cancel
            </Button>

            <Button
              type="submit"
              className="flex-1 h-12 rounded-xl bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 shadow-lg hover:shadow-xl transition-all duration-200"
              disabled={!file || uploading || success}
            >
              {uploading ? (
                <motion.div className="flex items-center gap-2">
                  <motion.div
                    animate={{ rotate: 360 }}
                    transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                  >
                    <Sparkles className="w-4 h-4" />
                  </motion.div>
                  Uploading...
                </motion.div>
              ) : success ? (
                <motion.div
                  initial={{ scale: 0.8 }}
                  animate={{ scale: 1 }}
                  className="flex items-center gap-2"
                >
                  <Check className="w-4 h-4" />
                  Uploaded Successfully!
                </motion.div>
              ) : (
                <div className="flex items-center gap-2">
                  <UploadCloud className="w-4 h-4" />
                  Upload File
                </div>
              )}
            </Button>
          </DialogFooter>
        </form>

        {file && uploading && (
          <div className="w-full bg-gray-200 rounded-full h-2 mt-4">
            <div
              className="bg-emerald-500 h-2 rounded-full transition-all duration-300"
              style={{ width: `${progress}%` }}
            ></div>
            <p className="text-xs text-gray-500 mt-1 text-center">{progress}%</p>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default UploadFileDialog;

