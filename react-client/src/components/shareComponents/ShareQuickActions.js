import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { Button } from "@/styles/ui/button";
import { motion } from "framer-motion";
import { Clock, Copy, Download, Eye } from "lucide-react";
const ShareQuickActions = ({ share, shareType, onPreview, onDownload, onExtend, onCopyLink }) => {
    const isInactive = share.used || share.fileIsDeleted;
    const isExpired = new Date(share.expiresAt) <= new Date();
    return (_jsxs("div", { className: "flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200", children: [shareType === 'received' && !isInactive && (_jsxs(_Fragment, { children: [_jsx(motion.div, { whileHover: { scale: 1.1 }, whileTap: { scale: 0.9 }, children: _jsx(Button, { variant: "ghost", size: "sm", onClick: onPreview, className: "h-8 w-8 p-0 rounded-lg hover:bg-emerald-100 hover:text-emerald-600", title: "Preview File", children: _jsx(Eye, { className: "w-4 h-4" }) }) }), _jsx(motion.div, { whileHover: { scale: 1.1 }, whileTap: { scale: 0.9 }, children: _jsx(Button, { variant: "ghost", size: "sm", onClick: onDownload, className: "h-8 w-8 p-0 rounded-lg hover:bg-blue-100 hover:text-blue-600", title: "Download File", children: _jsx(Download, { className: "w-4 h-4" }) }) })] })), shareType === 'sent' && !isInactive && (_jsxs(_Fragment, { children: [_jsx(motion.div, { whileHover: { scale: 1.1 }, whileTap: { scale: 0.9 }, children: _jsx(Button, { variant: "ghost", size: "sm", onClick: onCopyLink, className: "h-8 w-8 p-0 rounded-lg hover:bg-purple-100 hover:text-purple-600", title: "Copy Share Link", children: _jsx(Copy, { className: "w-4 h-4" }) }) }), !isExpired && (_jsx(motion.div, { whileHover: { scale: 1.1 }, whileTap: { scale: 0.9 }, children: _jsx(Button, { variant: "ghost", size: "sm", onClick: onExtend, className: "h-8 w-8 p-0 rounded-lg hover:bg-orange-100 hover:text-orange-600", title: "Extend Expiration", children: _jsx(Clock, { className: "w-4 h-4" }) }) }))] }))] }));
};
export default ShareQuickActions;
